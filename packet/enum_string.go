// Code generated by "stringer -type=LayerType,EtherType,ARPType,ARPOpCode -output enum_string.go"; DO NOT EDIT.

package packet

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LayerTypeUnknown-0]
	_ = x[LayerTypeEthernet-1]
	_ = x[LayerTypeIPv4-2]
	_ = x[LayerTypeARP-3]
}

const _LayerType_name = "LayerTypeUnknownLayerTypeEthernetLayerTypeIPv4LayerTypeARP"

var _LayerType_index = [...]uint8{0, 16, 33, 46, 58}

func (i LayerType) String() string {
	if i >= LayerType(len(_LayerType_index)-1) {
		return "LayerType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LayerType_name[_LayerType_index[i]:_LayerType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EtherTypeTooLow-2047]
	_ = x[EthernetTypeIPv4-2048]
	_ = x[EthernetTypeARP-2054]
	_ = x[EthernetTypeIPv6-34525]
	_ = x[EtherTypeTooHigh-34526]
}

const (
	_EtherType_name_0 = "EtherTypeTooLowEthernetTypeIPv4"
	_EtherType_name_1 = "EthernetTypeARP"
	_EtherType_name_2 = "EthernetTypeIPv6EtherTypeTooHigh"
)

var (
	_EtherType_index_0 = [...]uint8{0, 15, 31}
	_EtherType_index_2 = [...]uint8{0, 16, 32}
)

func (i EtherType) String() string {
	switch {
	case 2047 <= i && i <= 2048:
		i -= 2047
		return _EtherType_name_0[_EtherType_index_0[i]:_EtherType_index_0[i+1]]
	case i == 2054:
		return _EtherType_name_1
	case 34525 <= i && i <= 34526:
		i -= 34525
		return _EtherType_name_2[_EtherType_index_2[i]:_EtherType_index_2[i+1]]
	default:
		return "EtherType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ARPTypeEther-1]
}

const _ARPType_name = "ARPTypeEther"

var _ARPType_index = [...]uint8{0, 12}

func (i ARPType) String() string {
	i -= 1
	if i >= ARPType(len(_ARPType_index)-1) {
		return "ARPType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ARPType_name[_ARPType_index[i]:_ARPType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ARPOPCodeRequest-1]
	_ = x[ARPOPCodeReply-2]
}

const _ARPOpCode_name = "ARPOPCodeRequestARPOPCodeReply"

var _ARPOpCode_index = [...]uint8{0, 16, 30}

func (i ARPOpCode) String() string {
	i -= 1
	if i >= ARPOpCode(len(_ARPOpCode_index)-1) {
		return "ARPOpCode(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ARPOpCode_name[_ARPOpCode_index[i]:_ARPOpCode_index[i+1]]
}
